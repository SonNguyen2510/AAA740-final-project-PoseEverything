2023-12-06 16:04:03,169 - mmpose - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Nov 22 2023, 10:22:35) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.12.1+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu116
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMPose: 0.29.0+5c3cdf5
------------------------------------------------------------

2023-12-06 16:04:03,169 - mmpose - INFO - Distributed training: False
2023-12-06 16:04:03,753 - mmpose - INFO - Config:
log_level = 'INFO'
load_from = None
resume_from = None
dist_params = dict(backend='nccl')
workflow = [('train', 1)]
checkpoint_config = dict(interval=10)
evaluation = dict(
    interval=10,
    metric=['PCK', 'NME', 'AUC', 'EPE'],
    key_indicator='PCK',
    gpu_collect=True,
    res_folder='results')
optimizer = dict(
    type='AdamW',
    lr=0.0005,
    betas=(0.9, 0.999),
    weight_decay=0.1,
    constructor='LayerDecayOptimizerConstructor',
    paramwise_cfg=dict(
        num_layers=12,
        layer_decay_rate=0.8,
        custom_keys=dict(
            bias=dict(decay_multi=0.0),
            pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[160, 180])
total_epochs = 200
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
channel_cfg = dict(
    num_output_channels=1,
    dataset_joints=1,
    dataset_channel=[[0]],
    inference_channel=[0],
    max_kpt_num=100)
model = dict(
    type='TransformerPoseTwoStage',
    Dino=True,
    pretrained='torchvision://resnet50',
    encoder_config=dict(type='ResNet', depth=50, out_indices=(3, )),
    keypoint_head=dict(
        type='TwoStageHead',
        in_channels=384,
        transformer=dict(
            type='TwoStageSupportRefineTransformer',
            d_model=256,
            nhead=8,
            num_encoder_layers=3,
            num_decoder_layers=3,
            dim_feedforward=2048,
            dropout=0.1,
            similarity_proj_dim=256,
            dynamic_proj_dim=128,
            activation='relu',
            normalize_before=False,
            return_intermediate_dec=True),
        share_kpt_branch=False,
        num_decoder_layer=3,
        with_heatmap_loss=True,
        heatmap_loss_weight=2.0,
        support_embedding_type='fixed',
        num_support=100,
        support_order_dropout=-1,
        positional_encoding=dict(
            type='SinePositionalEncoding', num_feats=128, normalize=True)),
    share_backbone=True,
    train_cfg=dict(),
    test_cfg=dict(
        flip_test=False,
        post_process='default',
        shift_heatmap=True,
        modulate_kernel=11,
        Dino=True))
data_cfg = dict(
    image_size=[224, 224],
    heatmap_size=[64, 64],
    num_output_channels=1,
    num_joints=1,
    dataset_channel=[[0]],
    inference_channel=[0])
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='TopDownGetRandomScaleRotation', rot_factor=15,
        scale_factor=0.15),
    dict(type='TopDownAffineFewShot'),
    dict(type='ToTensor'),
    dict(
        type='NormalizeTensor',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='TopDownGenerateTargetFewShot', sigma=2),
    dict(
        type='Collect',
        keys=['img', 'target', 'target_weight'],
        meta_keys=[
            'image_file', 'joints_3d', 'joints_3d_visible', 'center', 'scale',
            'rotation', 'bbox_score', 'flip_pairs', 'category_id'
        ])
]
valid_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='TopDownAffineFewShot'),
    dict(type='ToTensor'),
    dict(
        type='NormalizeTensor',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='TopDownGenerateTargetFewShot', sigma=2),
    dict(
        type='Collect',
        keys=['img', 'target', 'target_weight'],
        meta_keys=[
            'image_file', 'center', 'scale', 'rotation', 'bbox_score',
            'flip_pairs', 'category_id'
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='TopDownAffineFewShot'),
    dict(type='ToTensor'),
    dict(
        type='NormalizeTensor',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(type='TopDownGenerateTargetFewShot', sigma=2),
    dict(
        type='Collect',
        keys=['img', 'target', 'target_weight'],
        meta_keys=[
            'image_file', 'center', 'scale', 'rotation', 'bbox_score',
            'flip_pairs', 'category_id'
        ])
]
data_root = '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100/'
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=8,
    train=dict(
        type='TransformerPoseDataset',
        ann_file=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//annotations/mp100_split1_train.json',
        img_prefix=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//images/',
        data_cfg=dict(
            image_size=[224, 224],
            heatmap_size=[64, 64],
            num_output_channels=1,
            num_joints=1,
            dataset_channel=[[0]],
            inference_channel=[0]),
        valid_class_ids=None,
        max_kpt_num=100,
        num_shots=1,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='TopDownGetRandomScaleRotation',
                rot_factor=15,
                scale_factor=0.15),
            dict(type='TopDownAffineFewShot'),
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='TopDownGenerateTargetFewShot', sigma=2),
            dict(
                type='Collect',
                keys=['img', 'target', 'target_weight'],
                meta_keys=[
                    'image_file', 'joints_3d', 'joints_3d_visible', 'center',
                    'scale', 'rotation', 'bbox_score', 'flip_pairs',
                    'category_id'
                ])
        ]),
    val=dict(
        type='TransformerPoseDataset',
        ann_file=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//annotations/mp100_split1_val.json',
        img_prefix=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//images/',
        data_cfg=dict(
            image_size=[224, 224],
            heatmap_size=[64, 64],
            num_output_channels=1,
            num_joints=1,
            dataset_channel=[[0]],
            inference_channel=[0]),
        valid_class_ids=None,
        max_kpt_num=100,
        num_shots=1,
        num_queries=15,
        num_episodes=100,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='TopDownAffineFewShot'),
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='TopDownGenerateTargetFewShot', sigma=2),
            dict(
                type='Collect',
                keys=['img', 'target', 'target_weight'],
                meta_keys=[
                    'image_file', 'center', 'scale', 'rotation', 'bbox_score',
                    'flip_pairs', 'category_id'
                ])
        ]),
    test=dict(
        type='TestPoseDataset',
        ann_file=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//annotations/mp100_split1_test.json',
        img_prefix=
        '/media/sonnguyen/DATA2/Study/superAI/Pose-for-Everything/tools/data/mp100//images/',
        data_cfg=dict(
            image_size=[224, 224],
            heatmap_size=[64, 64],
            num_output_channels=1,
            num_joints=1,
            dataset_channel=[[0]],
            inference_channel=[0]),
        valid_class_ids=None,
        max_kpt_num=100,
        num_shots=1,
        num_queries=15,
        num_episodes=200,
        pck_threshold_list=[0.05, 0.1, 0.15, 0.2, 0.25],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='TopDownAffineFewShot'),
            dict(type='ToTensor'),
            dict(
                type='NormalizeTensor',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(type='TopDownGenerateTargetFewShot', sigma=2),
            dict(
                type='Collect',
                keys=['img', 'target', 'target_weight'],
                meta_keys=[
                    'image_file', 'center', 'scale', 'rotation', 'bbox_score',
                    'flip_pairs', 'category_id'
                ])
        ]))
shuffle_cfg = dict(interval=1)
work_dir = './work_dirs/Dino_two_stage_split1_config'
gpu_ids = range(0, 1)

2023-12-06 16:04:03,753 - mmpose - INFO - Set random seed to 1, deterministic: True
